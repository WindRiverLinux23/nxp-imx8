        MCIMX8QM-MEK/MCIMX8M-EVK Board Support Package

1. About this document
======================

This document describes common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the following layers supplied with Wind River Linux:
  oe-core
  meta-imx
  meta-freescale

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the nxp-imx8 layer
---------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

License
-------
Copyright (C) 2023 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        Y         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype can be used for this BSP/Machine.


3. Board Specific Patches
=========================
To get a list of patches applied to the kernel specific to this BSP,
along with patch descriptions, use git to see what changed on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

	# cd tmp-glibc/work-shared/nxp-imx8/kernel-source
	# git whatchanged standard/base..


4. Boot Instructions
====================

4.1 NFS Root File System
------------------------

4.1.1 Prepare Kernel, DTB, NFS and TFTP servers
-----------------------------------------------
The files in the following example can be found in <buildprj>/tmp-glibc/deploy/images/nxp-imx8
and are copied to the export directory of the TFTP server.

4.1.2 Download kernel
---------------------

	# tftp $kernel_addr Image

4.1.3 Download DTB
------------------
For MCIMX8QM-MEK board:
	If you want to connect HDMI monitor to MIPI DSI1(J4) or DSI0(J9):
	# tftp $fdt_addr imx8qm-mek.dtb

	If you want to connect HDMI monitor to HDMI TX (J6):
	# tftp $fdt_addr imx8qm-mek-hdmi.dtb

	If you want to connect 2 HDMI monitors to HDMI TX (J6) and HDMI RX (J1):
	# tftp $fdt_addr imx8qm-mek-hdmi-in.dtb

	If you want to connect OLED screen to MIPI DSI1(J4) or DSI0(J9):
	# tftp $fdt_addr imx8qm-mek-dsi-rm67191.dtb

	If you want to connect OV5640 MIPI camera to MIPI CSI1(J5) or CSI0(J10):
	# tftp $fdt_addr imx8qm-mek-ov5640.dtb

For MCIMX8M-EVK board:
	If you want to use HDMI connector (J1001) as output:
	# tftp $fdt_addr imx8mq-evk.dtb

	If you want to use IMX-MIPI-HDMI on J1501 as output:
	# tftp $fdt_addr imx8mq-evk-dcss-adv7535.dtb

	If you want to use MX8-DSI-OLED1 on J1501 as output:
	# tftp $fdt_addr imx8mq-evk-dcss-rm67191.dtb

4.1.4 Download and load firmware
--------------------------------
For MCIMX8QM-MEK board:
	If you want to connect HDMI monitor to HDMI TX (J6):
	# tftp ${hdp_addr} hdmitxfw.bin
	# hdp load ${hdp_addr}

	If you want to connect 2 HDMI monitors to HDMI TX (J6) and HDMI RX (J1):
	# tftp ${hdp_addr} hdmitxfw.bin
	# hdp load ${hdp_addr}
	# tftp ${hdprx_addr} hdmirxfw.bin
	# hdprx load ${hdprx_addr}

4.1.5 Set bootargs and boot the system
--------------------------------------

	# setenv bootargs console=<$console_port> root=/dev/nfs rw \
		 nfsroot=<nfs server>:<nfs root> \
		 ip=<target IP>::<gateway>:<netmask>::eth0:off \
		 video=HDMI-A-1:1920x1080-32@60
	# booti $kernel_addr - $fdt_addr

Note: for MCIMX8QM-MEK board, $kernel_addr="0x8a0000000", $fdt_addr="0x8d0000000"
	$console_port = "ttyLP0,115200"
     for MCIMX8M-EVK board, $kernel_addr="0x40480000", $fdt_addr="0x44000000"
        $console_port = "ttymxc0,115200"
      The kernel image will become larger if more kernel code is compiled into kernel image.
      So, please increase "fdt_addr" value by putting dtb file at higher address if you encounter with kernel booting failed.


5. Features
===========

5.1 HDMI
--------

To enable HDMI as the default framebuffer device, add:

	video=HDMI-A-1:1920x1080-32@60

to the bootargs parameter of U-Boot.

5.2 USB feature
---------------

5.2.1 USB OTG Usage and verification
------------------------------------

1) Verify the OTG device mode

Plug in cable B and connect to the host machine.

Board configuration:

	# ifconfig usb0 192.168.1.10

Host machine configuration:

	# sudo ifconfig usb0 192.168.1.100
	# ping 192.168.1.10 -c 2
	PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.
	64 bytes from 192.168.1.10: icmp_req=1 ttl=64 time=2.06 ms
	64 bytes from 192.168.1.10: icmp_req=2 ttl=64 time=0.286 ms
	...

2) Switch to OTG host mode

Replace cable B with cable A.

5.3 Static PM
-------------

The debug UART can be set as a wakeup source with:

For MCIMX8QM-MEK board:
	# echo enabled > /sys/class/tty/ttyLP0/power/wakeup
For MCIMX8M-EVK board:
	# echo enabled > /sys/class/tty/ttymxc0/power/wakeup

	# echo mem > /sys/power/state

5.4 DMA & VPU
-------------

In wrlinux project, the version of sdma & vpu firmware which comes from linux-firmware
is 4.2, and there is a newer version 4.4 in the NXP i.mx SDK. Because of license issue,
the new version firmware can't be integrated into wrlinux product. If customer want to
use version 4.4 firmware, execute the following commands:

1) Download the firmware from URL:
	$ wget http://sources.buildroot.net/firmware-imx/firmware-imx-8.20.bin

2) Extract the firmware from the binary file:
	$ chmod 777 firmware-imx-8.20.bin
	$ ./firmware-imx-8.20.bin

3) You need to read and accept the EULA, and press y to continue. Then copy
firmwares to your rootfs:
	$ cd firmware-imx-8.20.bin
	$ cp firmware/sdma/sdma-imx7d.bin path_to_your_rootfs/lib/firmware/sdma/
	$ cp firmware/vpu/vpu_fw_imx8_dec.bin path_to_your_rootfs/lib/firmware/amphion/vpu/
	$ cp firmware/vpu/vpu_fw_imx8_enc.bin path_to_your_rootfs/lib/firmware/amphion/vpu/

5.5 Graphics
------------

5.5.1 Xwayland
--------------
If you want to build a xwayland image, please follow the steps as below:

<1> Setup program and create a build directory by using the following arguments:

	--machines nxp-imx8 --distros wrlinux-graphics --dl-layers

<2> Setup environment and create a build directory:

	$ . ./environment-setup-<host>-wrlinuxsdk-linux
	$ . ./oe-init-build-env <build>

<3> Use the command as below to build a xwayland image:

	bitbake wrlinux-image-std-sato

5.5.2 GPU
---------
Because of the licesen issue, nxp-imx8 layer doesn't integrate imx8's GPU(GC7000Lite) or VPU
hardware acceleration related packages into WRlinux product. So, if customer wants
to run hardware graphic feature. Detail steps as below:

<1> You must change the configuration to allow downloading of packages from the
internet. Change BB_NO_NETWORK ?= "1" to BB_NO_NETWORK ?= "0" in the file
${buildprj}/conf/local.conf.

<2> echo the following content to local.conf:

ACCEPT_FSL_EULA = "1"
LICENSE_FLAGS_ACCEPTED:append = " commercial"

BSP_NXP_DERIVED:append:nxp-imx8  = " nxp-imx8"
DISTROOVERRIDES:nxp-imx8 = "fsl fslc"

MACHINEOVERRIDES:prepend:nxp-imx8 = "mx8:mx8m:mx8qm:mx8mq:imxdrm:imxdpu:imxdcss:imxvpuhantro:imxgpu:imxgpu2d:imxgpu3d:mx8-nxp-bsp:imx-nxp-sdk:use-nxp-bsp:mx8mq-nxp-bsp:mx8qm-nxp-bsp:imxvulkan:mx8-generic-bsp:mx8qm-generic-bsp:"
IMAGE_INSTALL:append = " assimp devil imx-gpu-viv imx-gpu-sdk imx-gpu-viv-demos weston weston-init imx-dpu-g2d imx-vpu-hantro imx-gpu-apitrace weston-xwayland imx-g2d-samples gstreamer1.0 gstreamer1.0-plugins-base  gstreamer1.0-plugins-good imx-gst1.0-plugin gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-plugins-imx"
PREFERRED_PROVIDER_virtual/egl:imxgpu        ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgl:imxgpu3d    ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles1:imxgpu3d ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles2:imxgpu3d ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles3:imxgpu3d ?= "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libg2d            ?= "imx-gpu-g2d"
PREFERRED_PROVIDER_virtual/libg2d:imxdpu     ?= "imx-dpu-g2d"
PREFERRED_PROVIDER_virtual/opencl-icd:imxgpu ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-clhpp:imxgpu       ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-headers:imxgpu     ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-icd-loader:imxgpu  ?= "imx-gpu-viv"
PREFERRED_VERSION_vulkan-headers:mx8  = "1.2.182.0"
PREFERRED_VERSION_vulkan-loader:mx8 = "1.2.182.0"
PREFERRED_VERSION_libdrm:mx8 = "2.4.114.imx"
PREFERRED_VERSION_wayland-protocols:mx8 = "1.31.imx"
PREFERRED_VERSION_weston:mx8 = "11.0.1.imx"
PREFERRED_VERSION_ffmpeg:mx8 = "4.4.1"
PREFERRED_VERSION_opencv:mx8 = "4.6.0.imx"

PREFERRED_VERSION_gstreamer1.0-plugins-base:mx8 = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-bad:mx8  = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-good:mx8 = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-good-qt:mx8 = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-ugly:mx8 = "1.22.0"
PREFERRED_VERSION_gstreamer1.0:mx8              = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-libav:mx8        = "1.22.0"

PREFERRED_VERSION_xwayland:mx8                  = "23.1.1.imx"

DISTRO_FEATURES:remove = "directfb "
DISTRO_FEATURES:append = " wayland pam"

MACHINE_HAS_VIVANTE_KERNEL_DRIVER_SUPPORT = "1"
IMAGE_FEATURES:remove = "x11-base  x11-sato"
IMAGE_FEATURES:append = " weston"

# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths"
WARN_QA:remove = "${WARN_TO_ERROR_QA}"
ERROR_QA:append = " ${WARN_TO_ERROR_QA}"

CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-base'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-good'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-bad'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gst1.0-plugin'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-parser'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-codec'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-vpuwrap'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dsp'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dsp-codec-ext'
CUSTOMER_RECIPES:freescale-layer += 'gstreamer1.0-plugins-imx'
CUSTOMER_RECIPES:freescale-layer += 'libimxdmabuffer'
CUSTOMER_RECIPES:freescale-layer += 'libimxvpuapi'
CUSTOMER_RECIPES:freescale-layer += 'libimxvpuapi2'
CUSTOMER_RECIPES:freescale-layer += 'tinycompress'

CUSTOMER_RECIPES:openembedded-layer += 'freeglut'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-g2d-samples'
CUSTOMER_RECIPES:fsl-bsp-release += 'mesa'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv-demos'
CUSTOMER_RECIPES:fsl-sdk-release += 'imx-gpu-sdk'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-g2d'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dpu-g2d'
CUSTOMER_RECIPES:fsl-bsp-release += "imx-vpu-hantro"
CUSTOMER_RECIPES:fsl-bsp-release += "imx-vpu-hantro-daemon"
CUSTOMER_RECIPES:freescale-distro += 'assimp'
CUSTOMER_RECIPES:freescale-distro += 'devil'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-apitrace'
CUSTOMER_RECIPES:fsl-bsp-release += 'systemd-gpuconfig'
CUSTOMER_RECIPES:fsl-bsp-release += 'fmt'
CUSTOMER_RECIPES:fsl-bsp-release += 'systemd'
CUSTOMER_RECIPES:freescale-layer += 'ffmpeg'
CUSTOMER_RECIPES:freescale-layer += 'opencv'
CUSTOMER_RECIPES:fsl-bsp-release += 'wayland-protocols'
CUSTOMER_RECIPES:openembedded-layer += 'ccid'
CUSTOMER_RECIPES:openembedded-layer += 'pcsc-lite'
CUSTOMER_RECIPES:openembedded-layer += 'spirv-tools'
CUSTOMER_RECIPES:freescale-distro += 'glslang'
CUSTOMER_RECIPES:fsl-bsp-release += 'wayland-protocols'
CUSTOMER_RECIPES:fsl-bsp-release += 'libdrm'
CUSTOMER_RECIPES:openembedded-layer += 'nlohmann-json'
CUSTOMER_RECIPES:openembedded-layer += 'googletest'
CUSTOMER_RECIPES:openembedded-layer += 'rapidjson'
CUSTOMER_RECIPES:openembedded-layer += 'glm'
CUSTOMER_RECIPES:freescale-distro += 'stb'
CUSTOMER_RECIPES:fsl-sdk-release += 'rapidvulkan'
CUSTOMER_RECIPES:freescale-distro += 'rapidopencl'
CUSTOMER_RECIPES:freescale-distro += 'half'
CUSTOMER_RECIPES:fsl-sdk-release += 'gli'
CUSTOMER_RECIPES:freescale-distro += 'rapidopenvx'
CUSTOMER_RECIPES:fsl-sdk-release += 'vulkan-validationlayers'
CUSTOMER_RECIPES:fsl-bsp-release += 'linux-imx-headers'
CUSTOMER_RECIPES:freescale-layer += 'vulkan-headers'
CUSTOMER_RECIPES:freescale-layer += 'vulkan-loader'
CUSTOMER_RECIPES:openembedded-layer += 'vulkan-tools'
CUSTOMER_RECIPES:fsl-bsp-release += 'weston-init'
CUSTOMER_RECIPES:fsl-bsp-release += 'weston'
CUSTOMER_RECIPES:openembedded-layer += 'libxaw'
CUSTOMER_RECIPES:openembedded-layer += 'freerdp'
CUSTOMER_RECIPES:openembedded-layer += 'xterm'
CUSTOMER_RECIPES:meta-python += 'python3-wheel'
CUSTOMER_RECIPES:meta-python += 'python3-pip'
CUSTOMER_RECIPES:meta-python += 'python3-pybind11'
CUSTOMER_RECIPES:meta-python += 'python3-h5py'
CUSTOMER_RECIPES:meta-python += 'python3-keras-applications'
CUSTOMER_RECIPES:meta-python += 'python3-keras-preprocessing'
CUSTOMER_RECIPES:meta-python += 'python3-pkgconfig'
CUSTOMER_RECIPES:meta-tensorflow += 'bazel'
CUSTOMER_RECIPES:meta-tensorflow += 'openjdk-11'
CUSTOMER_RECIPES:openembedded-layer += 'hdf5'
CUSTOMER_RECIPES:meta-ml += 'nn-imx'
CUSTOMER_RECIPES:meta-ml += 'tensorflow-lite-host-tools'
CUSTOMER_RECIPES:meta-ml += 'tensorflow-protobuf'
CUSTOMER_RECIPES:meta-ml += 'tensorflow-lite'
CUSTOMER_RECIPES:meta-ml += 'flatbuffers'
CUSTOMER_RECIPES:meta-ml += 'nnstreamer'
CUSTOMER_RECIPES:meta-ml += 'ssat'
CUSTOMER_RECIPES:openembedded-layer += 'giflib'
CUSTOMER_RECIPES:openembedded-layer += 'leptonica'
CUSTOMER_RECIPES:openembedded-layer += 'tesseract'
CUSTOMER_RECIPES:openembedded-layer += 'tesseract-lang'
CUSTOMER_RECIPES:openembedded-layer += 'ade'
CUSTOMER_RECIPES:openembedded-layer += 'v4l-utils'
CUSTOMER_RECIPES:openembedded-layer += 'tbb'
CUSTOMER_RECIPES:multimedia-layer += 'gst-shark'
CUSTOMER_RECIPES:fsl-sdk-release += 'libxdg-shell'
CUSTOMER_RECIPES:freescale-layer += 'mxsldr'
CUSTOMER_RECIPES:freescale-layer += 'xwayland'

5.5.3 machine learning
----------------------

Add the following steps on the basis of graphic:

<1> Append the following packages to IMAGE_INSTALL:

On the basis of the above graphic steps:
MACHINEOVERRIDES:prepend:nxp-imx8 = "use-nxp-bsp:"
IMAGE_INSTALL:append = " gstreamer1.0 gstreamer1.0-plugins-base  gstreamer1.0-plugins-good tensorflow-lite nnstreamer imx-gst1.0-plugin gstreamer1.0-plugins-bad packagegroup-imx-ml onnxruntime tensorflow-lite-vx-delegate gstreamer1.0-rtsp-server gstreamer1.0-plugins-ugly gstreamer1.0-libav"

<2> Append the following packages to CUSTOMER_RECIPES:

CUSTOMER_RECIPES:meta-ml += 'nnstreamer-edge'
CUSTOMER_RECIPES:fsl-sdk-release += 'tinycompress'
CUSTOMER_RECIPES:meta-ml += 'packagegroup-imx-ml'
CUSTOMER_RECIPES:meta-ml += 'onnxruntime'
CUSTOMER_RECIPES:meta-ml += 'tensorflow-lite-vx-delegate'
CUSTOMER_RECIPES:meta-ml += 'pytorch'
CUSTOMER_RECIPES:meta-ml += 'nnshark'
CUSTOMER_RECIPES:meta-ml += 'torchvision'
CUSTOMER_RECIPES:meta-ml += 'modelrunner'
CUSTOMER_RECIPES:meta-ml += 'tvm'
CUSTOMER_RECIPES:meta-ml += 'deepview-rt'
CUSTOMER_RECIPES:meta-ml += 'tim-vx'
CUSTOMER_RECIPES:meta-ml += 'arm-compute-library'
CUSTOMER_RECIPES:meta-ml += 'deepview-rt-examples'
CUSTOMER_RECIPES:meta-ml += 'nnstreamer-protobuf'
CUSTOMER_RECIPES:fsl-sdk-release += 'libgpuperfcnt'
CUSTOMER_RECIPES:meta-python += 'python3-future'
CUSTOMER_RECIPES:meta-python += 'python3-decorator'
CUSTOMER_RECIPES:meta-python += 'python3-mpmath'
CUSTOMER_RECIPES:meta-python += 'python3-sympy'
CUSTOMER_RECIPES:meta-python += 'python3-coloredlogs'
CUSTOMER_RECIPES:meta-python += 'python3-humanfriendly'

<3> Use the command as below to build a xwayland image:

        bitbake wrlinux-image-std-sato

<4> downlaod these packeges below:

root:~# wget https://github.com/google-coral/test_data/raw/master/ssd_mobilenet_v2_coco_quant_postprocess.tflite
root:~# wget https://github.com/google-coral/test_data/raw/master/coco_labels.txt
root:~# export MODEL=$(pwd)/ssd_mobilenet_v2_coco_quant_postprocess.tflite
root:~# export LABELS=$(pwd)/coco_labels.txt

<6> Execute the following command:

gst-launch-1.0 --no-position v4l2src device=/dev/${capture device} ! video/x-raw,width=640,height=480,framerate=30/1 ! tee name=t t. ! queue max-size-buffers=2 leaky=2 ! imxvideoconvert_g2d ! video/x-raw,width=300,height=300,format=RGBA ! videoconvert ! video/x-raw,format=RGB ! tensor_converter ! tensor_filter framework=tensorflow-lite accelerator=true:gpu model=${pwd}/ssd_mobilenet_v2_coco_quant_postprocess.tflite custom=Delegate:NNAPI ! tensor_decoder mode=bounding_boxes option1=tf-ssd option2=${pwd}/coco_labels.txt option3=0:1:2:3,50 option4=640:480 option5=300:300 ! mix. t. ! queue max-size-buffers=2 ! imxcompositor_g2d name=mix sink_0::zorder=2 sink_1::zorder=1 ! waylandsink


5.6 thermal
-----------

	To check current CPU temperature
	# cd /sys/class/thermal/thermal_zone0
	# cat temp
	51000
	# cat trip_point_0_type
	passive
	# cat trip_point_0_temp
	85000
	# cat trip_point_1_type
	critical
	# cat trip_point_1_temp
	95000

5.7 PCIe
--------

All the imx8 platforms support PCIe feature.
The PCIe bus is provided through the M.2 connector.

Can choose the below PCIe peripheral to validate:

	Intel Corporation Wireless 7265

Can validate using the following steps:

Simply add line as follows to ${buildprj}/build/conf/local.conf:

	KERNEL_FEATURES:append = " features/iwlwifi/iwlwifi.scc"

This will include the iwlwifi and mac80211 kernel modules in
the root file system.

Built and install them:

	# bitbake wrlinux-image-glibc-xxx

Copy relevant WiFi card firmware (Intel 7265 WiFi firmware: iwlwifi-7265D-10.ucode)
of to /lib/firmware of the target image.

Execute the following commands to validate the WiFi cards:

	# ifconfig wlan<idx> up
	# iw wlan<idx> scan
	# iw dev wlan<idx> connect <AP essid>
	# dhclient wlan<idx>
	# ping <AP address> -i wlan<idx> -c 5

NOTE: the PCIe driver does not support hotplug and suspend/resume.

5.8 FLEXCAN (MCIMX8QXP-MEK & MCIMX8QM-MEK)
---------------------------

Detail verification commands as below:

        # ip link set can0 up type can bitrate 125000 dbitrate 8000000 fd on
        # ip link set can1 up type can bitrate 125000 dbitrate 8000000 fd on
        # candump can0 &
        # cansend can1 5A1#11.22.33.44.55.66.77.88
        # ip -d -s link show can0
        # ip -d -s link show can1

If can0 dumps data from can1, FLEXCAN feature works fine.

6. kexec/kdump
==============

For discussion purposes, some useful terminology will be described here.

* boot kernel - the first kernel that you start and supports kexec, from U-Boot
	      for instance
* capture kernel - the kernel that you reboot into after a boot kernel crash

To build the boot kernel, enable kexec and kdump in your local.conf file:

	WRTEMPLATE = "feature/kexec feature/kdump"

6.1 kdump
---------

For the boot kernel:
To reserve a memory region for the capture kernel, you need to pass the bootargs
argument "crashkernel" to the boot kernel as follow:

For MCIMX8QM-MEK board:
	crashkernel=512M

+For MCIMX8M-EVK board:
	crashkernel=512M@3000M

For the dump-capture kernel:
Before booting the dump-capture kernel, add "maxcpus=1 cma=128M" to the boot parameter.

NOTE: Use Image as a secondary kernel. It can be found in the
tmp-glibc/deploy/images/nxp-imx8/ directory.

For more detailed info about kdump, refer to Documentation/kdump/kdump.txt
in the kernel source tree.

7. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

https://docs.yoctoproject.org/singleindex.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp/deploy/images/<bsp name>/ ,such as:

tmp-glibc/deploy/images/nxp-imx8/wrlinux-image-<std-sato/std>-nxp-imx8.wic

Then user can write the output image to a SD card.

7.1 Burn images to SD card
--------------------------

1) Burn WIC image

# dd if=wrlinux-image-<std-sato/std>-nxp-imx8.wic of=/dev/your_sd_dev

2) Set environment variable for booting system

FOR MCIMX8QM-MEK board:

u-boot=>setenv fdt_file imx8qm-mek.dtb
u-boot=>setenv bootfile Image
u-boot=>setenv bootargs "root=/dev/mmcblk1p2 rootwait rw rootdelay=5 console=${console},${baudrate} earlycon ip=dhcp"
u-boot=>setenv bootcmd "fatload mmc 1:1 $loadaddr $bootfile; fatload mmc 1:1 $fdt_addr $fdt_file; booti $loadaddr - $fdt_addr";
u-boot=>run bootcmd

For MCIMX8M-EVK board:

u-boot=>setenv fdt_file imx8mq-evk-b3.dtb
u-boot=>setenv bootfile Image
u-boot=>setenv bootargs 'root=/dev/mmcblk1p2 rw rootdelay=5 console=ttymxc0,115200n8 ip=dhcp'
u-boot=>setenv bootcmd 'fatload mmc 1:1 $loadaddr $bootfile; fatload mmc 1:1 $fdt_addr $fdt_file; booti $loadaddr - $fdt_addr';
u-boot=>run bootcmd

8. Build Bootloader
===================

Because of license limitation, the NXP imx8 bootloader is not supported on WRLinux product.
But the necessary recipe files of building bootloader have been integrated into WRLinux product. In this way,
the customers can build bootloader for NXP imx8 platform based on WRLinux product by themselves.
To build bootloader image for NXP imx8 platform, it only needs to add below contents in local.conf file,
and then build WRLinux image as usual.

Prepare the bootloader image imx-boot-nxp-imx8-${machine}.bin-flash

BB_NO_NETWORK = '0'
ACCEPT_FSL_EULA = "1"
LICENSE_FLAGS_ACCEPTED:append = "commercial"

CUSTOMER_BUILD_BOOTLOADER = "1"
BSP_NXP_DERIVED:append=" nxp-imx8"

IMAGE_INSTALL:append = " imx-boot"

PREFERRED_PROVIDER_virtual/bootloader:mx8 = "u-boot-imx"
CUSTOMER_RECIPES:fsl-bsp-release += 'u-boot-imx'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-atf'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-mkimage'

# if board is imx8qm

MACHINEOVERRIDES:prepend = "mx8qm:mx8qm-nxp-bsp:mx8-generic-bsp:mx8qm-generic-bsp:"

IMX_EXTRA_FIRMWARE:mx8-generic-bsp = "imx-boot-firmware-files imx-sc-firmware imx-seco"
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot-firmware-files'
CUSTOMER_RECIPES:freescale-layer += 'imx-sc-firmware'
CUSTOMER_RECIPES:freescale-layer += 'imx-seco'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-m4-demos'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot'
PREFERRED_VERSION_imx-m4-demos:mx8qm-nxp-bsp = "2.9.0"

UBOOT_CONFIG ??= "mx8qmmek"
UBOOT_CONFIG[mx8qmmek] = "imx8qm_mek_defconfig,sdcard"

IMAGE_BOOT_FILES:append = " hdmitxfw.bin hdmirxfw.bin dpfw.bin"
IMX_DEFAULT_BOOTLOADER:use-nxp-bsp ="u-boot-imx"
IMX_DEFAULT_BOOTLOADER:use-mainline-bsp ="u-boot-fslc"

# Set ATF platform name
ATF_PLATFORM = "imx8qm"

IMX_BOOT_SOC_TARGET = "iMX8QM"

UBOOT_MAKE_TARGET = \
    "${@bb.utils.contains('MACHINE_FEATURES', 'optee', '', \
                                                       'u-boot.bin', d)}"
SPL_BINARY = \
    "${@bb.utils.contains('MACHINE_FEATURES', 'optee', 'spl/u-boot-spl.bin', \
                                                       '', d)}"

IMXBOOT_TARGETS_SD = \
     "${@bb.utils.contains('MACHINE_FEATURES', 'optee', 'flash_spl', \
                                                        'flash flash_ca72', d)}"
IMXBOOT_TARGETS_FSPI=\
     "${@bb.utils.contains('MACHINE_FEATURES', 'optee', 'flash_spl_flexspi', \
                                                        'flash_flexspi', d)}"
IMXBOOT_TARGETS = \
     "${@bb.utils.contains('UBOOT_CONFIG', 'mx8qmmek', '${IMXBOOT_TARGETS_SD}', \
                                                        '${IMXBOOT_TARGETS_FSPI}', d)}"

# if board is imx8mq

MACHINEOVERRIDES:prepend = "mx8m:mx8mq:mx8mq-nxp-bsp:mx8m-generic-bsp:"

IMX_EXTRA_FIRMWARE:mx8-generic-bsp = "imx-boot-firmware-files"
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-boot-firmware-files'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-m4-demos'
CUSTMER_RECIPES:fsl-bsp-release += 'imx-boot'

CUSTOMER_RECIPES:fsl-bsp-release += 'firmware-imx-8m'

UBOOT_SUFFIX = "bin"

UBOOT_CONFIG ??= "mx8mqevk"
UBOOT_CONFIG[mx8mqevk]       = "imx8mq_evk_config,sdcard"

SPL_BINARY = "spl/u-boot-spl.bin"

OPTEE_BOOT_IMAGE:mx8-nxp-bsp ?= "tee.bin"

IMAGE_BOOT_FILES:append:imx8mq-evk = " \
    imx8mq_m4_TCM_hello_world.bin \
    imx8mq_m4_TCM_rpmsg_lite_pingpong_rtos_linux_remote.bin \
    imx8mq_m4_TCM_rpmsg_lite_str_echo_rtos.bin \
"

# Set DDR FIRMWARE
DDR_FIRMWARE_NAME = " \
    lpddr4_pmu_train_1d_imem.bin \
    lpddr4_pmu_train_1d_dmem.bin \
    lpddr4_pmu_train_2d_imem.bin \
    lpddr4_pmu_train_2d_dmem.bin \
"

UBOOT_DTB_NAME = "imx8mq-evk.dtb"

ATF_PLATFORM = "imx8mq"

IMXBOOT_TARGETS = "flash_evk flash_evk_no_hdmi flash_dp_evk"
IMX_BOOT_SOC_TARGET = "iMX8M"

UBOOT_EXTLINUX:use-mainline-bsp = "1"

LOADADDR = ""
UBOOT_MAKE_TARGET = ""
IMX_BOOT_SEEK = "33"

OPTEE_BIN_EXT = "8mq"

9. USB OTG
==========

This section only describs how to verify usb otg feature on MCIMX8QM-MEK board.

9.1 Host Mode
-------------

Connect usb disk with usb typec port(J17) on MCIMX8QM-MEK board.
Usb disk is detected, and then confirm the speed with command as below:

	# lsusb -t
	/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=/1p, 5000M
	    |__ Port 1: Dev 2, If 0, Class=Mass Storage, Driver=usb-storage, 5000M
	/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=/1p, 480M

9.2 Device Mode
---------------

Connect the usb typec port(J17) to PC host, and then run below commands:

	# modprobe libcomposite

	# mkdir /sys/kernel/config/usb_gadget/g1
	# cd /sys/kernel/config/usb_gadget/g1

	# echo 0x1fc9 > idVendor
	# echo 0x12cf > idProduct

	# mkdir strings/0x409
	# echo 123456ABCDEF > strings/0x409/serialnumber
	# echo NXP > strings/0x409/manufacturer
	# echo "NXP iMX USB Composite Gadget" > strings/0x409/product

	# mkdir configs/c.1
	# mkdir configs/c.1/strings/0x409

	# echo 5 > configs/c.1/MaxPower
	# echo 0xc0 > configs/c.1/bmAttributes

	# mkdir functions/mass_storage.1
	# dd if=/dev/zero of=/root/g_mass_file bs=512K count=1000
	# echo /root/g_mass_file > functions/mass_storage.1/lun.0/file
	# ln -s functions/mass_storage.1 configs/c.1/

	# mkdir functions/acm.1
	# ln -s functions/acm.1 configs/c.1

	# mkdir functions/ncm.1
	# echo 20 > functions/ncm.1/qmult
	# ln -s functions/ncm.1 configs/c.1

	# echo 5b130000.usb > UDC

After running above commands, MCIMX8QM-MEK board works as a usb mass storage device.

10 Optee-test
-------------

Because optee os is integrated into the bootloader image, and due to license reasons,
we don't support building the bootloader by default. Therefore, before using optee
features, you need to refer to section 8 ("Build Bootloader") to compile an WIC image
with the bootloader.

1) Burn WIC image
# bitbake wrlinux-image-std
# dd if=wrlinux-image-<std-sato/std>-nxp-imx8.wic of=/dev/your_sd_dev

2) run optee testing sample 
# xtest
